shader_type canvas_item;
uniform sampler2D tex_frg_2;
uniform sampler2D tex_frg_4;
uniform sampler2D tex_frg_3;



void vertex() {
// Output:0

}

void fragment() {
// Texture:2
	vec4 tex_frg_2_read = texture(tex_frg_2, UV.xy);
	vec3 n_out2p0 = tex_frg_2_read.rgb;
	float n_out2p1 = tex_frg_2_read.a;

// Color:6
	vec3 n_out6p0 = vec3(0.000000, 1.000000, 0.015625);
	float n_out6p1 = 1.000000;

// Texture:4
	vec4 tex_frg_4_read = texture(tex_frg_4, UV.xy);
	vec3 n_out4p0 = tex_frg_4_read.rgb;
	float n_out4p1 = tex_frg_4_read.a;

// VectorScalarMix:5
	vec3 n_out5p0 = mix(n_out2p0, n_out6p0, n_out4p1);

// Texture:3
	vec4 tex_frg_3_read = texture(tex_frg_3, UV.xy);
	vec3 n_out3p0 = tex_frg_3_read.rgb;
	float n_out3p1 = tex_frg_3_read.a;

// Output:0
	COLOR.rgb = n_out5p0;
	COLOR.a = n_out3p1;

}

void light() {
// Output:0

}

shader_type canvas_item;
uniform vec4 outline_color:hint_color = vec4(1.0,1.0,0.0,1.0);
uniform float inner_circle=0.45;
uniform float outer_circle=0.5;


const vec4 alpha_color= vec4(0,0,0,0);

uniform float smoothness=0.01;


void fragment(){

	vec2 origin = UV-vec2(0.5,0.5);
	
	float dist =length(origin); //sqrt(dot(origin,origin));
	
	vec4 _color= mix (texture(TEXTURE,UV),outline_color,smoothstep(inner_circle-smoothness,inner_circle+smoothness,dist));
	 COLOR= mix (_color,alpha_color,smoothstep(outer_circle-smoothness,outer_circle+smoothness,dist));
}